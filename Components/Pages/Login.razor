@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@inject NavigationManager NavigationManager

@attribute [AllowAnonymous] // このページのみ認証不要

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow" style="width: 20rem;">
        <div class="card-body">
            <h3 class="text-center mb-3">Login</h3>
            <EditForm EditContext="EditContext" FormName="login-form" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />
                <ValidationSummary Model="Model" />
                <div>
                    <label class="mb-3">
                        ユーザー名:
                        <InputText @bind-Value="Model.UserName" class="w-100"/>
                        <ValidationMessage For="() => Model.UserName" />
                    </label>
                </div>
                <div>
                    <label class="mb-3">
                        パスワード:
                        <InputText @bind-Value="Model.Password" type="password" class="w-100"/>
                        <ValidationMessage For="() => Model.Password" />
                    </label>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary w-100">ログイン</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginForm Model { get; set; } = default!;
    private EditContext EditContext { get; set; } = default!;
    private ValidationMessageStore ValidationMessageStore { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized");
        _ = HttpContext ?? throw new InvalidOperationException("Static SSR で実行してください。");
        if (HttpContext.User.Identity?.IsAuthenticated == true) {
        NavigationManager.NavigateTo(
                "",
                forceLoad: true
            );
        }

        Model ??= new();
        EditContext = new(Model);
        ValidationMessageStore = new(EditContext);
    }

    private async Task LoginAsync(EditContext editContext)
    {
        _ = HttpContext ?? throw new InvalidOperationException("Static SSR で実行してください。");

        ClaimsIdentity? identity = null;
        // 本来であればここでログイン処理をするような機能を呼び出す
        // if (Model.UserName == "admin" && Model.Password == "P@ssw0rd!")
        if (Model.UserName == "admin" && Model.Password == "admin") // Mod Tobotobo パスワード変更
        {
            identity = new(
                [new Claim(ClaimTypes.Name, Model.UserName), new Claim(ClaimTypes.Role, "Administrator")],
                CookieAuthenticationDefaults.AuthenticationScheme);
        }
        // else if (Model.UserName == "user" && Model.Password == "P@ssw0rd!")
        else if (Model.UserName == "user" && Model.Password == "user") // Mod Tobotobo パスワード変更
        {
            identity = new(
                [new Claim(ClaimTypes.Name, Model.UserName), new Claim(ClaimTypes.Role, "User")],
                CookieAuthenticationDefaults.AuthenticationScheme);
        }

        if (identity != null)
        {
            // ログイン成功！
            await HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(identity)
            );
        }
        else
        {
            // ログイン失敗
            ValidationMessageStore.Add(EditContext.Field(""), "ログインに失敗しました。");
        }
    }

    class LoginForm
    {
        [Required(ErrorMessage = "ユーザー名を入力してください。")]
        public string UserName { get; set; } = "";
        [Required(ErrorMessage = "パスワードを入力してください。")]
        public string Password { get; set; } = "";
    }
}
